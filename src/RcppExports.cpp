// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mlsom
List mlsom(NumericMatrix data, List parameters, int dtype, int niter, NumericMatrix nhbrdist, NumericVector alphas, NumericVector radii);
RcppExport SEXP _smlsom_mlsom(SEXP dataSEXP, SEXP parametersSEXP, SEXP dtypeSEXP, SEXP niterSEXP, SEXP nhbrdistSEXP, SEXP alphasSEXP, SEXP radiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nhbrdist(nhbrdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    rcpp_result_gen = Rcpp::wrap(mlsom(data, parameters, dtype, niter, nhbrdist, alphas, radii));
    return rcpp_result_gen;
END_RCPP
}
// mlsom_clf
List mlsom_clf(NumericMatrix X, IntegerVector y, IntegerVector nsubc, IntegerVector cumnsubc, List parameters, int dtype, int niter, NumericMatrix nhbrdist, NumericVector alphas, NumericVector radii);
RcppExport SEXP _smlsom_mlsom_clf(SEXP XSEXP, SEXP ySEXP, SEXP nsubcSEXP, SEXP cumnsubcSEXP, SEXP parametersSEXP, SEXP dtypeSEXP, SEXP niterSEXP, SEXP nhbrdistSEXP, SEXP alphasSEXP, SEXP radiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nsubc(nsubcSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cumnsubc(cumnsubcSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type nhbrdist(nhbrdistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    rcpp_result_gen = Rcpp::wrap(mlsom_clf(X, y, nsubc, cumnsubc, parameters, dtype, niter, nhbrdist, alphas, radii));
    return rcpp_result_gen;
END_RCPP
}
// onebatch
List onebatch(NumericMatrix data, List parameters, IntegerVector classes, int dtype);
RcppExport SEXP _smlsom_onebatch(SEXP dataSEXP, SEXP parametersSEXP, SEXP classesSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(onebatch(data, parameters, classes, dtype));
    return rcpp_result_gen;
END_RCPP
}
// classifsubc_within_class
IntegerVector classifsubc_within_class(NumericMatrix X, IntegerVector y, IntegerVector nsubc, IntegerVector cumnsubc, List parameters, int dtype);
RcppExport SEXP _smlsom_classifsubc_within_class(SEXP XSEXP, SEXP ySEXP, SEXP nsubcSEXP, SEXP cumnsubcSEXP, SEXP parametersSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nsubc(nsubcSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cumnsubc(cumnsubcSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(classifsubc_within_class(X, y, nsubc, cumnsubc, parameters, dtype));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood
NumericMatrix loglikelihood(NumericMatrix data, List parameters, NumericVector llconst, int dtype);
RcppExport SEXP _smlsom_loglikelihood(SEXP dataSEXP, SEXP parametersSEXP, SEXP llconstSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type llconst(llconstSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood(data, parameters, llconst, dtype));
    return rcpp_result_gen;
END_RCPP
}
// classification_loglikelihood
NumericVector classification_loglikelihood(NumericMatrix data, List parameters, IntegerVector classes, NumericVector llconst, int dtype);
RcppExport SEXP _smlsom_classification_loglikelihood(SEXP dataSEXP, SEXP parametersSEXP, SEXP classesSEXP, SEXP llconstSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type llconst(llconstSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(classification_loglikelihood(data, parameters, classes, llconst, dtype));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood_const
NumericVector loglikelihood_const(NumericMatrix data, int dtype);
RcppExport SEXP _smlsom_loglikelihood_const(SEXP dataSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_const(data, dtype));
    return rcpp_result_gen;
END_RCPP
}
// eval_without
List eval_without(int target_m, NumericMatrix data, IntegerVector search_mrange, List parameters, IntegerVector classes, NumericVector llconst, int dtype);
RcppExport SEXP _smlsom_eval_without(SEXP target_mSEXP, SEXP dataSEXP, SEXP search_mrangeSEXP, SEXP parametersSEXP, SEXP classesSEXP, SEXP llconstSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type target_m(target_mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type search_mrange(search_mrangeSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type llconst(llconstSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_without(target_m, data, search_mrange, parameters, classes, llconst, dtype));
    return rcpp_result_gen;
END_RCPP
}
// model_test1
double model_test1(NumericVector x, NumericVector mu, NumericMatrix Sigma);
RcppExport SEXP _smlsom_model_test1(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(model_test1(x, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// model_test2
double model_test2(NumericVector x, NumericVector mu1, NumericMatrix Sigma1, NumericVector mu2, NumericMatrix Sigma2);
RcppExport SEXP _smlsom_model_test2(SEXP xSEXP, SEXP mu1SEXP, SEXP Sigma1SEXP, SEXP mu2SEXP, SEXP Sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sigma1(Sigma1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sigma2(Sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(model_test2(x, mu1, Sigma1, mu2, Sigma2));
    return rcpp_result_gen;
END_RCPP
}
// model_test3
List model_test3(double alpha, NumericVector x, NumericVector mu, NumericMatrix Sigma);
RcppExport SEXP _smlsom_model_test3(SEXP alphaSEXP, SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(model_test3(alpha, x, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// model_test4
double model_test4(NumericVector x, NumericVector mu, NumericVector Sigma);
RcppExport SEXP _smlsom_model_test4(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(model_test4(x, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// model_io_test1
void model_io_test1(List parameters);
RcppExport SEXP _smlsom_model_io_test1(SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    model_io_test1(parameters);
    return R_NilValue;
END_RCPP
}
// model_io_test2
void model_io_test2(List parameters);
RcppExport SEXP _smlsom_model_io_test2(SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    model_io_test2(parameters);
    return R_NilValue;
END_RCPP
}
// model_io_test3
List model_io_test3(List parameters, int dtype);
RcppExport SEXP _smlsom_model_io_test3(SEXP parametersSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(model_io_test3(parameters, dtype));
    return rcpp_result_gen;
END_RCPP
}
// model_io_test4
List model_io_test4(List parameters, int p);
RcppExport SEXP _smlsom_model_io_test4(SEXP parametersSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(model_io_test4(parameters, p));
    return rcpp_result_gen;
END_RCPP
}
// clustering_test1
IntegerVector clustering_test1(NumericMatrix data, List parameters);
RcppExport SEXP _smlsom_clustering_test1(SEXP dataSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(clustering_test1(data, parameters));
    return rcpp_result_gen;
END_RCPP
}
// clustering_test2
double clustering_test2(int t, int niter, NumericVector radii);
RcppExport SEXP _smlsom_clustering_test2(SEXP tSEXP, SEXP niterSEXP, SEXP radiiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radii(radiiSEXP);
    rcpp_result_gen = Rcpp::wrap(clustering_test2(t, niter, radii));
    return rcpp_result_gen;
END_RCPP
}
// clustering_test3
double clustering_test3(int t, int niter, NumericVector alphas);
RcppExport SEXP _smlsom_clustering_test3(SEXP tSEXP, SEXP niterSEXP, SEXP alphasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    rcpp_result_gen = Rcpp::wrap(clustering_test3(t, niter, alphas));
    return rcpp_result_gen;
END_RCPP
}
// list_test
void list_test(NumericMatrix X, IntegerVector classes, int M);
RcppExport SEXP _smlsom_list_test(SEXP XSEXP, SEXP classesSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    list_test(X, classes, M);
    return R_NilValue;
END_RCPP
}
// method_test1
List method_test1(List parameters, int target_m, int p);
RcppExport SEXP _smlsom_method_test1(SEXP parametersSEXP, SEXP target_mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type target_m(target_mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(method_test1(parameters, target_m, p));
    return rcpp_result_gen;
END_RCPP
}
// method_test2
IntegerVector method_test2(NumericMatrix data, List parameters, IntegerVector classes, int target_m);
RcppExport SEXP _smlsom_method_test2(SEXP dataSEXP, SEXP parametersSEXP, SEXP classesSEXP, SEXP target_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< int >::type target_m(target_mSEXP);
    rcpp_result_gen = Rcpp::wrap(method_test2(data, parameters, classes, target_m));
    return rcpp_result_gen;
END_RCPP
}
// method_test3
List method_test3(NumericMatrix data, List parameters, IntegerVector classes);
RcppExport SEXP _smlsom_method_test3(SEXP dataSEXP, SEXP parametersSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(method_test3(data, parameters, classes));
    return rcpp_result_gen;
END_RCPP
}
// cholinv_test1
NumericMatrix cholinv_test1(NumericMatrix A);
RcppExport SEXP _smlsom_cholinv_test1(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cholinv_test1(A));
    return rcpp_result_gen;
END_RCPP
}
// cholinv_test2
NumericMatrix cholinv_test2(NumericMatrix A);
RcppExport SEXP _smlsom_cholinv_test2(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cholinv_test2(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smlsom_mlsom", (DL_FUNC) &_smlsom_mlsom, 7},
    {"_smlsom_mlsom_clf", (DL_FUNC) &_smlsom_mlsom_clf, 10},
    {"_smlsom_onebatch", (DL_FUNC) &_smlsom_onebatch, 4},
    {"_smlsom_classifsubc_within_class", (DL_FUNC) &_smlsom_classifsubc_within_class, 6},
    {"_smlsom_loglikelihood", (DL_FUNC) &_smlsom_loglikelihood, 4},
    {"_smlsom_classification_loglikelihood", (DL_FUNC) &_smlsom_classification_loglikelihood, 5},
    {"_smlsom_loglikelihood_const", (DL_FUNC) &_smlsom_loglikelihood_const, 2},
    {"_smlsom_eval_without", (DL_FUNC) &_smlsom_eval_without, 7},
    {"_smlsom_model_test1", (DL_FUNC) &_smlsom_model_test1, 3},
    {"_smlsom_model_test2", (DL_FUNC) &_smlsom_model_test2, 5},
    {"_smlsom_model_test3", (DL_FUNC) &_smlsom_model_test3, 4},
    {"_smlsom_model_test4", (DL_FUNC) &_smlsom_model_test4, 3},
    {"_smlsom_model_io_test1", (DL_FUNC) &_smlsom_model_io_test1, 1},
    {"_smlsom_model_io_test2", (DL_FUNC) &_smlsom_model_io_test2, 1},
    {"_smlsom_model_io_test3", (DL_FUNC) &_smlsom_model_io_test3, 2},
    {"_smlsom_model_io_test4", (DL_FUNC) &_smlsom_model_io_test4, 2},
    {"_smlsom_clustering_test1", (DL_FUNC) &_smlsom_clustering_test1, 2},
    {"_smlsom_clustering_test2", (DL_FUNC) &_smlsom_clustering_test2, 3},
    {"_smlsom_clustering_test3", (DL_FUNC) &_smlsom_clustering_test3, 3},
    {"_smlsom_list_test", (DL_FUNC) &_smlsom_list_test, 3},
    {"_smlsom_method_test1", (DL_FUNC) &_smlsom_method_test1, 3},
    {"_smlsom_method_test2", (DL_FUNC) &_smlsom_method_test2, 4},
    {"_smlsom_method_test3", (DL_FUNC) &_smlsom_method_test3, 3},
    {"_smlsom_cholinv_test1", (DL_FUNC) &_smlsom_cholinv_test1, 1},
    {"_smlsom_cholinv_test2", (DL_FUNC) &_smlsom_cholinv_test2, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_smlsom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
